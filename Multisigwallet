pragma solidity 0.8.16;

contract Multisigwallet {

    /*
    In this project, you should build a Multisig Wallet Smart Contract. 
    A multisig wallet is a wallet where multiple “signatures” or approvals 
    are needed for an outgoing transfer to take place. As an example, I could 
    create a multisig wallet with me and my 2 friends. I configure the wallet 
    such that it requires at least 2 of us to sign any transfer before it is valid. 
    Anyone can deposit funds into this wallet. But as soon as we want to spend funds, 
    it requires 2/3 approvals.

    Here are the requirements of the smart contract wallet you will be building

    – CHECK Anyone should be able to deposit ether into the smart contract

    – The contract creator should be able to input (1): the addresses of the owners and (2):  
    the numbers of approvals required for a transfer, in the constructor. For example, 
    input 3 addresses and set the approval limit to 2. 

    – Anyone of the owners should be able to create a transfer request. The creator of the 
    transfer request will specify what amount and to what address the transfer will be made.

    – Owners should be able to approve transfer requests.

    – When a transfer request has the required approvals, the transfer should be sent. 
    */
    
    address wallet1;
    address wallet2;
    address wallet3;
    uint amountOfApprovals;

    constructor (address _wallet1, address _wallet2, address _wallet3, uint _amountOfApprovals){
        wallet1 = _wallet1;
        wallet2 = _wallet2;
        wallet3 = _wallet3;
        amountOfApprovals = _amountOfApprovals;
    }

    mapping(address => uint) balance;

    struct Transfer{
        uint amount;
        address payable recipient;
        bool wallet1Approval;
        bool wallet2Approval;
        bool wallet3Approval;
    }

    Transfer[] transfers;

    modifier onlyOwner {
        require(msg.sender == wallet1 || msg.sender == wallet2 || msg.sender == wallet3, "You must be owner of contract!");
        _;    
    }

    function deposit() public payable {
        balance[msg.sender] += msg.value;
    }

    function getBalance() public view returns (uint) {
        return balance[msg.sender];
    }

    function getBalanceOfContract() public view returns (uint) {
        return address(this).balance;
    }

    function initiateTransfer(address payable recipient, uint amount) public onlyOwner {
        
        transfers.push(Transfer(amount,recipient,false,false,false));
        
    }

    function approveTransfer(uint index) public onlyOwner {
        if(amountOfApprovals == 2){
            if(msg.sender == wallet1){
            transfers[index].wallet1Approval = true;
            }
            if(msg.sender == wallet2){
                transfers[index].wallet2Approval = true;
            }
            if(msg.sender == wallet3){
                transfers[index].wallet3Approval = true;
            }
            if(transfers[index].wallet1Approval == true && transfers[index].wallet2Approval == true ||
            transfers[index].wallet2Approval == true && transfers[index].wallet3Approval == true ||
            transfers[index].wallet1Approval == true && transfers[index].wallet3Approval == true ){
                _transfer(transfers[index].amount, transfers[index].recipient);

            }
        }
        if(amountOfApprovals == 3){
            if(msg.sender == wallet1){
            transfers[index].wallet1Approval = true;
            }
            if(msg.sender == wallet2){
                transfers[index].wallet2Approval = true;
            }
            if(msg.sender == wallet3){
                transfers[index].wallet3Approval = true;
            }
            if(transfers[index].wallet1Approval == true && 
               transfers[index].wallet2Approval == true && 
               transfers[index].wallet3Approval == true ){
                _transfer(transfers[index].amount, transfers[index].recipient);

            }
        }
        
    }

    function _transfer(uint _amount, address payable _recipient) private {
        require(address(this).balance >= _amount, "Balance of contract must be higher or equal to the amount you want to send!");
        _recipient.transfer(_amount);
    }

    function getTransferById(uint index) public view returns (uint, address, bool, bool, bool){
        return (transfers[index].amount, transfers[index].recipient, transfers[index].wallet1Approval, transfers[index].wallet2Approval, transfers[index].wallet3Approval);  
    }

    function getTheLastTransactionIndex() public view returns (uint) {
        return transfers.length-1;
    }
}
